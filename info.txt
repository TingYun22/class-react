https://github.com/eyesofkids/mfee23-react/tree/main/%E6%95%99%E6%9D%90/0217/React%E5%B0%88%E6%A1%88%E8%A8%AD%E5%AE%9A/CRA-eslint-prettier

https://eddy-chang.gitbook.io/react-basic-zh-tw/


# 狀態: 使用者操作後不斷改變的資料值
# 屬性: 靜態資料

flow嚴格檢查類型(有些缺點，如太慢等)
現在以TypeScript

# 更新狀態三步驟原則:
  1. 從原本(物件/物件)的狀態拷貝出來
  2. 從拷貝出來的值進行修改
  3. 設定回原來的狀態值

# Pure function 純函式 (React 元件同純函式，不能隨意更改 Props)
  --> functional programming 函數式編程(數學函數概念)
  1. same input===same output
  2. 不依賴外部狀態的
  3. 沒有副作用(Side Effects)

# 生命週期方法(類別裡的函式)，初始設計給類別型元件用
  而函式型元件useEffect原是要處理副作用，但能模擬生命週期方法(非100%)

# 先決定狀態是甚麼? 「狀態」是會隨使用者操作而改變的值
# 哪些可拆?
  1.重複利用、未來可能會是動態數量的 (DRY(Don't repeat yourself)原則(principle))
  2. 功能有獨立性
# 何處? 狀態應該來自共同父母

# props  -> 
  key    -> map用，同一階層在使用的(新增、刪除、修改...)(字串)
  refs   -> 真實DOM元素背後得到的參照
            不要過度使用
            為整合第三方套件

# 生命週期方法一開始為設定給類別型元件用
  ***** 掛載 -> 
    從無到有的階段(componentDidMount已經完成)
    1. 可直接DOM處理、界接第三方應用程式
    2. 跟伺服器要資料

  ***** 更新 ->
    componentDidUpdate觸發:
    1. 內部狀態改變
    2. 從父母接收到新的屬性

    補充))進階生命週期方法(1.除錯、2.效能最佳化)

  -> 卸載
    componentWillUnmount
    從有到無

# Hooks不能在if else、for、內部函式、流程控制中呼叫與宣告